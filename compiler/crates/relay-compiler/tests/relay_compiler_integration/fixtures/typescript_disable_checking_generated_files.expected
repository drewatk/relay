==================================== INPUT ====================================
//- foo.ts
/**
 * @RelayResolver User.foo: RelayResolverValue
 */

//- bar.ts
graphql`fragment barFragment on User {
   foo
}`

//- relay.config.json
{
   "language": "typescript",
   "schema": "./schema.graphql",
   "eagerEsModules": true,
   "featureFlags": {
      "typescript_disable_checking_generated_files": false
   }
}

//- schema.graphql
type Query { user: User }
type User { foo: String }
==================================== OUTPUT ===================================
//- __generated__/barFragment.graphql.ts
/**
 * <auto-generated> SignedSource<<f74cdd2d84c642f49ae0c257d0740cde>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */

import { ReaderFragment } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
export type barFragment$data = {
  readonly foo: string | null | undefined;
  readonly " $fragmentType": "barFragment";
};
export type barFragment$key = {
  readonly " $data"?: barFragment$data;
  readonly " $fragmentSpreads": FragmentRefs<"barFragment">;
};

const node: ReaderFragment = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "barFragment",
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "foo",
      "storageKey": null
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node as any).hash = "f60f2dcc6b71a6c9ec170e68dc2c994d";

export default node;
