==================================== INPUT ====================================
//- foo.js
graphql`
  fragment foo on User {
     name
  }`;

//- relay.config.json
{
   "language": "typescript",
   "schema": "./schema.graphql",
   "featureFlags": {
      "typescript_check_generated_files": true
   }
}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/foo.graphql.ts
/**
 * <auto-generated> SignedSource<<d62af12dc2df17606bf454f3ccd89c3b>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */

import { Fragment, ReaderFragment } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
export type foo$data = {
  readonly name: string | null | undefined;
  readonly " $fragmentType": "foo";
};
export type foo$key = {
  readonly " $data"?: foo$data;
  readonly " $fragmentSpreads": FragmentRefs<"foo">;
};

const node: ReaderFragment = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "foo",
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "name",
      "storageKey": null
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node as any).hash = "01d5e51e4b7ff55557834f125c21745d";

export default node;
